-- Fohhn Q-SYS Plugin
-- by Fohhn Audio AG
-- February 2024
-- licensed under the MIT License, see LICENSE for more information
-- Read README.md before use

PluginInfo = {
  Name = "Fohhn~Fohhn Dante Device Plugin",
  Version = "0.9",
  Id = "3569c07f-76ff-467d-9e7e-9603ebb9ee24",
  Author = "Fohhn",
  Description = "Plugin for Fohhn devices with Dante interface"
}

FOHHN_DEVICES = { 
  [1] = "DLI-130",
  [2] = "DLI-230",
  [3] = "DLI-330",
  [4] = "DLI-430",
  [5] = "DI-2.2000",
  [6] = "DI-2.4000",
  [7] = "DI-4.1000",
  [8] = "DI-4.2000", 
  [9] = "FS-70",
  [10] = "FS-110", 
  [11] = "FS-150",
  [12] = "FS-200",
  [13] = "MA-4.100",
  [14] = "MA-4.600",
  [15] = "MA-2.1200",
  [16] = "X-16",
  [17] = "Scale-1 PoE",
  [18] = "SL-20 PoE",
  [19] = "AS-206",
  [20] = "AS-112",
  [21] = "AS-115",
}

NumOutputChannels = 1
ErrorFlags = {}
ErrorFlagsFault = { "Fault" }
ErrorFlagsFocus = { "Fault", "AudioFault", "PilotToneFault" }
ErrorFlags2ChAmp = { "Protect1", "Protect2" }
ErrorFlags4ChAmp = { "Protect1", "Protect2", "Protect3", "Protect4" }

function GetColor(props) 
  return {255, 134, 43}
end

function GetPrettyName(props)
  return "Fohhn " .. props["Model"].Value .. " Dante " .. props["IP Address"].Value .. " Id:" .. props["Fohhn-Net ID"].Value 
end

function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then
    props["Debug Print"].IsHidden = true
  end
  return props
end

function Config(props)
  selectedModel = props["Model"].Value
  if selectedModel == FOHHN_DEVICES[1] then
    NumOutputChannels = 1
    ErrorFlags = ErrorFlagsFocus
  elseif selectedModel == FOHHN_DEVICES[2] then
    NumOutputChannels = 1
    ErrorFlags = ErrorFlagsFocus
  elseif selectedModel == FOHHN_DEVICES[3] then
    NumOutputChannels = 1
    ErrorFlags = ErrorFlagsFocus
  elseif selectedModel == FOHHN_DEVICES[4] then
    NumOutputChannels = 1 
    ErrorFlags = ErrorFlagsFocus
  elseif selectedModel == FOHHN_DEVICES[5] then
    NumOutputChannels = 2 
    ErrorFlags = ErrorFlags2ChAmp
  elseif selectedModel == FOHHN_DEVICES[6] then
    NumOutputChannels = 2 
    ErrorFlags = ErrorFlags2ChAmp
  elseif selectedModel == FOHHN_DEVICES[7] then
    NumOutputChannels = 4 
    ErrorFlags = ErrorFlags4ChAmp
  elseif selectedModel == FOHHN_DEVICES[8] then
    NumOutputChannels = 4 
    ErrorFlags = ErrorFlags4ChAmp
  elseif selectedModel == FOHHN_DEVICES[9] then
    NumOutputChannels = 1 
    ErrorFlags = ErrorFlagsFocus
  elseif selectedModel == FOHHN_DEVICES[10] then
    NumOutputChannels = 1 
    ErrorFlags = ErrorFlagsFocus
  elseif selectedModel == FOHHN_DEVICES[11] then
    NumOutputChannels = 1 
    ErrorFlags = ErrorFlagsFocus
  elseif selectedModel == FOHHN_DEVICES[12] then
    NumOutputChannels = 1 
    ErrorFlags = ErrorFlagsFocus
  elseif selectedModel == FOHHN_DEVICES[13] then
    NumOutputChannels = 4 
    ErrorFlags = ErrorFlags4ChAmp
  elseif selectedModel == FOHHN_DEVICES[14] then
    NumOutputChannels = 4 
    ErrorFlags = ErrorFlags4ChAmp
  elseif selectedModel == FOHHN_DEVICES[15] then
    NumOutputChannels = 2 
    ErrorFlags = ErrorFlags2ChAmp
  elseif selectedModel == FOHHN_DEVICES[16] then
    NumOutputChannels = 16
    ErrorFlags = ErrorFlagsFault
  elseif selectedModel == FOHHN_DEVICES[17] then
    NumOutputChannels = 1
    ErrorFlags = ErrorFlagsFault
  elseif selectedModel == FOHHN_DEVICES[18] then
    NumOutputChannels = 1
    ErrorFlags = ErrorFlagsFault
  elseif selectedModel == FOHHN_DEVICES[19] then
    NumOutputChannels = 1
    ErrorFlags = ErrorFlagsFault
  elseif selectedModel == FOHHN_DEVICES[20] then
    NumOutputChannels = 1
    ErrorFlags = ErrorFlagsFault
  elseif selectedModel == FOHHN_DEVICES[21] then
    NumOutputChannels = 1
    ErrorFlags = ErrorFlagsFault
  end
end


function GetProperties()
  local props = {}

  table.insert(props, {
    Name = "Model",
    Type = "enum",	
    Choices = FOHHN_DEVICES,
    Value = FOHHN_DEVICES[1],
  })

  table.insert(props, {
    Name = "IP Address",
    Type = "string",
    Value = "169.254.254.178",
  })

  table.insert(props, {
    Name = "Fohhn-Net ID",
    Type = "integer",
    Value = 1,
    Min = 1,
    Max = 254,	        
  })

  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Errors", "All"},
    Value = "None"
  })

  return props
end

function GetControls(props)
  local ctrls = {}

  Config(props)

  table.insert(ctrls, {
    Name = "Online",
    ControlType = "Indicator",
    IndicatorType = "Led",
    PinStyle = "Output",
    UserPin = true,
    Count = 1
  })


  for k, v in pairs(ErrorFlags) do
    table.insert(
    ctrls,
    {
      Name = v,
      ControlType = "Indicator",
      IndicatorType = "Led",
      PinStyle = "Output",
      UserPin = true,
      Count = 1
    }
    )
  end

  for i = 1,NumOutputChannels do
    table.insert(ctrls, {
      Name = "VolumeCh" .. i ,
      ControlType = "Knob",
      ControlUnit = "Float",
      Min = -80.0,
      Max = 12.0,
      Units = "dB",
      PinStyle = "Both",
      Count = 1,
      UserPin = true
    })

    table.insert(ctrls, {
      Name = "MuteCh" .. i,
      ControlType = "Button",
      ButtonType = "Toggle",
      PinStyle = "Both",
      Count = 1,
      UserPin = true
    })
  end

  table.insert(ctrls, {
    Name = "Standby",
    ControlType = "Button",
    ButtonType = "Toggle",
    PinStyle = "Both",
    Count = 1,
    UserPin = true
  })

  table.insert(ctrls, {
    Name = "Preset",
    ControlType = "Text",
    PinStyle = "Both",
    Count = 1,
    UserPin = true
  })

  table.insert(ctrls, {
    Name = "PresetName",
    ControlType = "Indicator",
    IndicatorType = "Text",
    PinStyle = "Output",
    UserPin = true,
    Count = 1
  })

  return ctrls
end

function GetControlLayout(props)
  local layout = {}
  local graphics = {}

  Config(props)

  table.insert(
  graphics,
  {
    Type = "Text",
    Text = "Online",
    Position = {25, 5},
    Size = {95, 16},
    FontSize = 14,
    HTextAlign = "Left"
  }
  )

  for k, v in pairs(ErrorFlags) do
    table.insert(
    graphics,
    {
      Type = "Text",
      Text = v,
      Position = {25, 25 + (20 * (k - 1))},
      Size = {95, 16},
      FontSize = 14,
      HTextAlign = "Left"
    }
    )
  end



  table.insert(graphics, {
    Type = "Text",
    Text = "Preset",
    Position = {200, 10},
    Size = {50, 16},
    FontSize = 14,
    HTextAlign = "Left"
  })

  for i = 1,NumOutputChannels do
    table.insert(graphics, {
      Type = "Text",
      Text = "CH" .. i,
      Position = {10 + (50 * (i-1)), 120},
      Size = {40, 16},
      FontSize = 14,
      HTextAlign = "Left"
    }) 
  end


  layout["Online"] = {
    PrettyName = "Online",
    Style = "Led",
    Position = {5, 5},
    Size = {16, 16},
    Color = {0, 255, 0}
  }

  for k, v in pairs(ErrorFlags) do
    layout[v] = {
      PrettyName = v,
      Style = "Led",
      Position = {5, 25 + (20 * (k - 1))},
      Size = {16, 16},
      OffColor = {63, 0, 0},
      Color = {255, 0, 0}
    }

  end


  for i = 1,NumOutputChannels do
    layout["VolumeCh" .. i] = {
      PrettyName = "VolumeCh" .. i,
      Style = "Fader",
      Position = {4 + (50 * (i-1)) , 140},
      Size = {40, 150}
    }

    layout["MuteCh" .. i] = {
      PrettyName = "MuteCh" .. i,
      Legend = "Mute",
      Style = "Button",
      ButtonStyle = "Toggle",
      Color = {255, 0, 0},
      Position = {5 + (50 * (i-1)), 290},
      Size = {40, 24}
    }

  end


  layout["Standby"] = {
    PrettyName = "Standby",
    Legend = "Standby",
    Style = "Button",
    ButtonStyle = "Toggle",
    Color = {255, 0, 0},
    Position = {320, 5},
    Size = {60, 24}
  }

  layout["Preset"] = {
    PrettyName = "Preset",
    Style = "Text Field",
    Position = {260, 5},
    Size = {40, 24}
  }

  layout["PresetName"] = {
    PrettyName = "PresetName",
    Style = "Text Field",
    Position = {200, 40},
    Size = {100, 24}
  }

  return layout, graphics
end

DebugPrintErrors = false
DebugPrintInfo = false

if Controls then

  function debug_info(s)
    if (DebugPrintInfo) then
      print(s)    
    end
  end

  function debug_error(s)
    if (DebugPrintErrors) then
      print(s)    
    end   
  end



  IPAddress = Properties["IP Address"].Value
  Port = 2101
  Id = Properties["Fohhn-Net ID"].Value
  Config(Properties)


  DebugPrint = Properties["Debug Print"].Value
  if DebugPrint == "Errors" then
    DebugPrintErrors = true
  elseif DebugPrint == "All" then
    DebugPrintInfo = true
    DebugPrintErrors = true
  end

  debug_info("IP Adress: " .. IPAddress)
  debug_info("Fohhn-Net ID: " .. Id)

  retryOnlineStatus = 2

  retryErrorFlags = {}
  for i = 1,8 do
    retryErrorFlags[i] = 2
  end

  volume = {}
  for i = 1,NumOutputChannels do
    volume[i] = {
      gain = -80.0,
      mute = true,
      update = false,
      readback = true,
    }
  end

  readControls = {
    update = true,
    readback = true,
  }

  standby = {
    standby = true,
    update = false,
    readback = true,
  }

  preset = {
    number = 1,
    name = "",
    update = false,
    readback = true,
  }

  Controls.Online.Value = false

  Controls.Standby.Value = true
  Controls.Standby.EventHandler = function(source)
    standby.standby = Controls.Standby.Value
    standby.update = true
    sendCommand()
  end

  Controls.PresetName.String = ""
  Controls.Preset.String = ""
  Controls.Preset.EventHandler = function(source)
    local number = tonumber(Controls.Preset.String)
    if(number ~= nil) then
      if number >= 1 and number <= 100 then
	preset.number = number
	preset.update = true
	sendCommand()
      end
    end	
  end

  for i = 1,NumOutputChannels do
    Controls["VolumeCh" .. i].Value = -80.0
    Controls["VolumeCh" .. i].EventHandler = function(source)
      volume[i].gain = Controls["VolumeCh" .. i].Value
      volume[i].mute = Controls["MuteCh" .. i].Value
      volume[i].update = true
      sendCommand()
    end
    Controls["MuteCh" .. i].Value = true
    Controls["MuteCh" .. i].EventHandler = function(source)
      volume[i].gain = Controls["VolumeCh" .. i].Value
      volume[i].mute = Controls["MuteCh" .. i].Value
      volume[i].update = true
      sendCommand()
    end
  end


  UDP = UdpSocket.New()
  UDP:Open(nil, nil)

  pollTimer = Timer.New()
  timeoutTimer = Timer.New()
  wait = false
  busy = false
  delayed = false  
  online = false
  currentData = nil

  pollTimer.EventHandler = function()
    if not wait then	
      readControls.update = true	
      sendCommand()
    end
  end

  timeoutTimer.EventHandler = function()
    timeoutTimer:Stop()

    if not wait then
      return
    end

    wait = false
    debug_error("TIMEOUT " .. retryOnlineStatus)	

    online = false
    retryOnlineStatus = retryOnlineStatus - 1
    if (retryOnlineStatus < 0) then
      retryOnlineStatus = 2	
      debug_error("Device is offline")
      Log.Error("device is offline")
      Controls.Online.Value = false
    end

    if currentData ~= nil then
      currentData.update = true
    end

  end

  function decodeVolume(data, volumeFader, muteButton)
    if(string.len(data) == 3) then
      volumeFader.Value = signed_word(string.byte(data, 1),
      string.byte(data, 2)) / 10.0
      if ((string.byte(data, 3) & 1) == 1) then
	muteButton.Value = false
      else
	muteButton.Value = true
      end
    else
      debug_error("volume: wrong readback size")
    end
  end

  function decodeErrorFlags(data)
    if(string.len(data) >= 4) and (string.len(data) <= 5) then
      local flags = string.byte(data, 1)
      local channel = 1
      for k, v in pairs(ErrorFlags) do
	bit = 2 ^ (channel - 1)
	channel = channel + 1
	if ((flags & bit) == bit) then
	  retryErrorFlags[channel] = retryErrorFlags[channel] - 1
	  if (retryErrorFlags[channel] < 0) then
	    retryErrorFlags[channel] = 2
	    Log.Error(v)
	    debug_error(v)
	    Controls[v].Value = true
	  end
	else
	  retryErrorFlags[channel] = 2
	  Controls[v].Value = false
	end	  
      end

    else
      debug_error("controls: wrong readback size")
      Log.Error("controls: wrong readback size")
    end
  end

  function decodeStandby(data, standbyToggle)
    if(string.len(data) == 1) then
      local flags = string.byte(data, 1)
      if ((flags & 1) == 1) then
	standbyToggle.Value = true
      else
	standbyToggle.Value = false
      end
    else
      debug_error("standby: wrong readback size")
    end
  end

  function decodePreset(data, presetEdit, presetNameLabel)    
    if(string.len(data) == 20) then
      local number = string.byte(data, 1)	  
      if(number >= 1) and (number <= 100)then
	presetEdit.String = number		
	name = string.sub(data, 2, 18)
	name = string.gsub(name, "%c+", "")
	name = string.gsub(name, "^%s+", "")
	name = string.gsub(name, "%s+$", "") 
	presetNameLabel.String = name
      else
	debug_error("invalid preset number" .. number)
      end
    else
      debug_error("preset: wrong readback size")
    end
  end

  function encode(byte)
    if (byte == 0xF0) then
      return string.char(0xFF, 0x00)
    elseif (byte == 0xFF) then
      return string.char(0xFF, 0x01)
    else
      return string.char(byte)
    end
  end

  function lsb(word)
    return word & 0xFF
  end

  function msb(word) 
    return (word >> 8) & 0xFF
  end

  function signed_word(msb, lsb)
    local w = (msb << 8) + lsb
    if (w > 32767) then
      return w - 65536
    else
      return w
    end
  end

  function fohhn_package(id, cmd, msb, lsb, data)
    local result = string.char(0xF0)
    result = result .. encode(id) .. encode(string.len(data))
    result = result .. encode(cmd) .. encode(msb) .. encode(lsb)
    for c in data:gmatch "." do
      result = result .. encode(string.byte(c))
    end
    return result
  end

  function round(x)
    if(x > 0) then
      return math.floor(x + 0.5)
    else
      return math.ceil(x - 0.5)
    end
  end

  function volumePackage(id, channel, volume, mute)
    local gain = round(volume * 10.0)
    local flags = 0x01
    if (mute == 1) then 
      flags = 0x00
    end      
    debug_info("Volume Ch " .. channel .. " : " .. volume .. " " .. flags)      
    return fohhn_package(id, 0x87, channel, 0x01, string.char(msb(gain), lsb(gain), flags))		  
  end

  function readVolumePackage(id, channel)
    debug_info("Read Volume Ch " .. channel)      
    return fohhn_package(id, 0x0A, channel, 0x01, string.char(0x87))
  end

  function standbyPackage(id, standby)
    return fohhn_package(id, 0x0C, 0x00, 0x00, string.char(standby))
  end

  function readStandbyPackage(id)
    return fohhn_package(id, 0x0A, 0x00, 0x00, string.char(0x0C))
  end

  function readControlsPackage(id)
    return fohhn_package(id, 0x07, 0x01, 0x00, string.char(0x00))
  end

  function loadPresetPackage(id, number)
    debug_info("Preset: " .. number)
    return fohhn_package(id, 0x05, 0x01, number, string.char(0x00))
  end

  function readPresetPackage(id)    
    debug_info("Reading Preset")
    return fohhn_package(id, 0x8E, 0x01, 0x00, string.char(0x00))
  end

  function fohhn_reply(raw, checkId)
    if (string.sub(raw, -1) ~= string.char(0xF0)) then 
      return nil 
    end
    local result = ""
    i = 1
    len = string.len(raw)
    while (i < len) do
      c = string.sub(raw, i, i)
      if (string.byte(c) == 0xFF) then
	i = i + 1
	c = string.sub(raw, i, i)
	if (string.byte(c) == 0x00) then
	  result = result .. string.char(0xF0)
	elseif (string.byte(c) == 0x01) then
	  result = result .. string.char(0xFF)
	else
	  return nil
	end
      else
	result = result .. c
      end
      i = i + 1
    end

    if (string.sub(result, -1) ~= string.char(checkId)) then
      return nil
    end

    return string.sub(result, 1, string.len(result) - 1)
  end

  function resetBusyFlag()
    busy = false
  end

  function sendCommand()
    if not delayed then
      sendCommandTimed()
    end
  end

  function 	sendCommandTimed()
    if wait or busy then
      if(wait) then
	debug_info("waiting for reply")		
      end
      if(busy)then
	debug_info("device busy")		
      end
      if(online) then
	delayed = true		  
	Timer.CallAfter(sendCommandTimed, 0.1)
      else
	delayed = false
      end	  	 
      return		
    end
    delayed = false

    local deviceBusyTime = nil
    local pkg = nil

    if standby.readback then
      pkg = readStandbyPackage(Id)
      currentData = standby		
      goto send
    elseif standby.update then	
      pkg = standbyPackage(Id, standby.standby)		
      currentData = standby		
      goto send
    elseif preset.readback then
      pkg = readPresetPackage(Id)
      currentData = preset		
      goto send
    elseif preset.update then	
      pkg = loadPresetPackage(Id, preset.number)
      busy = true	
      deviceBusyTime = 1.2
      currentData = preset		
      goto send
    end

    for i = 1,NumOutputChannels do	  
      if volume[i].readback then
	pkg = readVolumePackage(Id, i)
	currentData = volume[i]
	goto send
      elseif volume[i].update then	    
	pkg = volumePackage(Id, i, volume[i].gain, volume[i].mute)
	currentData = volume[i]      
	goto send
      end	  
    end

    if pkg == nil then
      pkg = readControlsPackage(Id)
      currentData = readControls
    end

    ::send::
    if pkg ~= nil then      
      wait = true
      currentData.update = false
      UDP:Send(IPAddress, Port, pkg)
      timeoutTimer:Start(1)
      if deviceBusyTime ~= nil then
	Timer.CallAfter(resetBusyFlag, deviceBusyTime)
      end
    end
  end

  function readbackPending()
    local pend = false
    for i = 1,NumOutputChannels do
      if volume[i].readback then
	pend = true
      end
    end
    if preset.readback then
      pend = true
    end
    if standby.readback then
      pend = true
    end
    return pend
  end

  function startReadback()
    for i = 1,NumOutputChannels do
      volume[i].readback  = true			
    end
    preset.readback = true
  end



  UDP.Data = function(socket, packet)
    timeoutTimer:Stop()
    wait = false

    local data = fohhn_reply(packet.Data, Id)

    if(currentData == nil) then
      debug_error("no current data")
      return
    end

    if (data == nil) then
      debug_error("Invalid reply")
      return
    else
      debug_info("Reply from: " .. packet.Address .. ":" .. packet.Port)
    end

    if online == false then
      Log.Message("device is online")
    end

    online = true
    Controls.Online.Value = true    

    if (currentData == readControls) then	    
      decodeErrorFlags(data)      
    end

    if(currentData.readback)then

      if (currentData == standby) then
	decodeStandby(data, Controls.Standby)
      elseif (currentData == preset) then	  
	decodePreset(data, Controls.Preset, Controls.PresetName)
      end

      for i = 1,NumOutputChannels do
	if  currentData == volume[i] then
	  decodeVolume(data, Controls["VolumeCh" .. i],Controls["MuteCh" .. i])  
	end
      end

      currentData.readback = false
    else
      if (currentData == preset) then
	startReadback()
      end
    end

    currentData = nil

    if readbackPending() then
      sendCommand()
    end
  end

  sendCommand()
  pollTimer:Start(1)
end
